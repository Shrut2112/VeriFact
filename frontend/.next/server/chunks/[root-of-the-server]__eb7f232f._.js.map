{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":["file:///D:/untitled/mis-info-ai/frontend/app/api/analyze/route.ts"],"sourcesContent":["/* TypeScript */\r\nexport const runtime = 'nodejs';\r\nexport const dynamic = 'force-dynamic';\r\n\r\nexport async function POST(req: Request) {\r\n    try {\r\n        const backendUrl = process.env.NEXT_PUBLIC_BACKEND_URL;\r\n        if (!backendUrl) {\r\n            return new Response(JSON.stringify({ error: 'Backend URL not configured' }), { status: 500 });\r\n        }\r\n\r\n        const frontendFormData = await req.formData();\r\n        const text = frontendFormData.get('text');\r\n        const url = frontendFormData.get('url');\r\n        const file = frontendFormData.get('file');\r\n\r\n        let res: Response;\r\n\r\n        // Check if the input is a file upload\r\n        if (file instanceof File && file.size > 0) {\r\n            // A file exists, so we send it as multipart/form-data to the /analyze-file endpoint\r\n            const filePayload = new FormData();\r\n            filePayload.append('file', file);\r\n\r\n            res = await fetch(`${backendUrl}/analyze`, {\r\n                method: 'POST',\r\n                body: filePayload,\r\n            });\r\n\r\n        } else {\r\n            // The input is text or a URL, so we send as application/json to the /analyze endpoint\r\n            const jsonPayload: { text?: string; url?: string; input_type: string } = {\r\n                input_type: 'text' // Default\r\n            };\r\n\r\n            if (text && typeof text === 'string' && text.trim()) {\r\n                jsonPayload.text = text.trim();\r\n                jsonPayload.input_type = 'text';\r\n            } else if (url && typeof url === 'string' && url.trim()) {\r\n                jsonPayload.url = url.trim();\r\n                jsonPayload.input_type = 'url';\r\n            } else {\r\n                return new Response(JSON.stringify({ error: 'No valid text or URL input provided' }), { status: 400 });\r\n            }\r\n\r\n            res = await fetch(`${backendUrl}/analyze`, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(jsonPayload),\r\n            });\r\n        }\r\n\r\n        // Handle the response from the backend\r\n        const body = await res.json();\r\n\r\n        // If the backend returned an error status, forward it\r\n        if (!res.ok) {\r\n            const errorMessage = body.detail || body.error || 'Unknown backend error';\r\n            return new Response(JSON.stringify({ error: errorMessage }), { status: res.status });\r\n        }\r\n\r\n        // If successful, forward the complete success response\r\n        return new Response(JSON.stringify(body), {\r\n            status: 200,\r\n            headers: { 'Content-Type': 'application/json' },\r\n        });\r\n\r\n    } catch (err: any) {\r\n        // Handle network errors or other issues with the proxy itself\r\n        console.error(\"Proxy Error:\", err);\r\n        return new Response(JSON.stringify({ error: 'Proxy error', detail: String(err?.message || err) }), { status: 500 });\r\n    }\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,cAAc;;;;;AACP,MAAM,UAAU;AAChB,MAAM,UAAU;AAEhB,eAAe,KAAK,GAAY;IACnC,IAAI;QACA,MAAM;QACN;;QAIA,MAAM,mBAAmB,MAAM,IAAI,QAAQ;QAC3C,MAAM,OAAO,iBAAiB,GAAG,CAAC;QAClC,MAAM,MAAM,iBAAiB,GAAG,CAAC;QACjC,MAAM,OAAO,iBAAiB,GAAG,CAAC;QAElC,IAAI;QAEJ,sCAAsC;QACtC,IAAI,gBAAgB,QAAQ,KAAK,IAAI,GAAG,GAAG;YACvC,oFAAoF;YACpF,MAAM,cAAc,IAAI;YACxB,YAAY,MAAM,CAAC,QAAQ;YAE3B,MAAM,MAAM,MAAM,GAAG,WAAW,QAAQ,CAAC,EAAE;gBACvC,QAAQ;gBACR,MAAM;YACV;QAEJ,OAAO;YACH,sFAAsF;YACtF,MAAM,cAAmE;gBACrE,YAAY,OAAO,UAAU;YACjC;YAEA,IAAI,QAAQ,OAAO,SAAS,YAAY,KAAK,IAAI,IAAI;gBACjD,YAAY,IAAI,GAAG,KAAK,IAAI;gBAC5B,YAAY,UAAU,GAAG;YAC7B,OAAO,IAAI,OAAO,OAAO,QAAQ,YAAY,IAAI,IAAI,IAAI;gBACrD,YAAY,GAAG,GAAG,IAAI,IAAI;gBAC1B,YAAY,UAAU,GAAG;YAC7B,OAAO;gBACH,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;oBAAE,OAAO;gBAAsC,IAAI;oBAAE,QAAQ;gBAAI;YACxG;YAEA,MAAM,MAAM,MAAM,GAAG,WAAW,QAAQ,CAAC,EAAE;gBACvC,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;gBAC9C,MAAM,KAAK,SAAS,CAAC;YACzB;QACJ;QAEA,uCAAuC;QACvC,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,sDAAsD;QACtD,IAAI,CAAC,IAAI,EAAE,EAAE;YACT,MAAM,eAAe,KAAK,MAAM,IAAI,KAAK,KAAK,IAAI;YAClD,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAa,IAAI;gBAAE,QAAQ,IAAI,MAAM;YAAC;QACtF;QAEA,uDAAuD;QACvD,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,OAAO;YACtC,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAClD;IAEJ,EAAE,OAAO,KAAU;QACf,8DAA8D;QAC9D,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;YAAe,QAAQ,OAAO,KAAK,WAAW;QAAK,IAAI;YAAE,QAAQ;QAAI;IACrH;AACJ","debugId":null}}]
}